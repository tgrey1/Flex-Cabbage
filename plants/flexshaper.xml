<?xml version="1.0" encoding="UTF-8"?>
<plant>
<namespace>flexshaper</namespace>
<name>FlexShaper</name>
<cabbagecode>
groupbox $POPUP_BOX bounds(0, 0, 374, 260), text("---"), identchannel("plant-c"), visible(0) {
  vslider $SLIDER pos(0, 25), size(56, 175), channel("val1"), identchannel("val1-c"), range(-1, 1, 1, 1, .01), valuetextbox(1), text("---"), popuppostfix(" %")
  vslider $SLIDER pos(46, 25), size(56, 175), channel("val2"), identchannel("val2-c"), range(-1, 1, 0, 1, .01), valuetextbox(1), text("---"), popuppostfix(" %")
  vslider $SLIDER pos(92, 25), size(56, 175), channel("val3"), identchannel("val3-c"), range(-1, 1, 0, 1, .01), valuetextbox(1), text("---"), popuppostfix(" %")
  vslider $SLIDER pos(138, 25), size(56, 175), channel("val4"), identchannel("val4-c"), range(-1, 1, 0, 1, .01), valuetextbox(1), text("---"), popuppostfix(" %")
  vslider $SLIDER pos(184, 25), size(56, 175), channel("val5"), identchannel("val5-c"), range(-1, 1, 0, 1, .01), valuetextbox(1), text("---"), popuppostfix(" %")
  vslider $SLIDER pos(230, 25), size(56, 175), channel("val6"), identchannel("val6-c"), range(-1, 1, 0, 1, .01), valuetextbox(1), text("---"), popuppostfix(" %")
  vslider $SLIDER pos(276, 25), size(56, 175), channel("val7"), identchannel("val7-c"), range(-1, 1, 0, 1, .01), valuetextbox(1), text("---"), popuppostfix(" %")
  vslider $SLIDER pos(322, 25), size(56, 175), channel("val8"), identchannel("val8-c"), range(-1, 1, 0, 1, .01), valuetextbox(1), text("---"), popuppostfix(" %")

  combobox $COMBO pos(50, 50), size(70, 20), channel("morphshape1"), items("Sine","Triangle","Saw","Square"), identchannel("morph1-c"), visible(0)
  combobox $COMBO pos(50, 150), size(70, 20), channel("morphshape2"), items("Sine","Triangle","Saw","Square"), identchannel("morph2-c"), value(3), visible(0)

  checkbox $GREEN_CC pos(35, 207), size(85, 14), channel("normalize"), value(1), text("Normalize"), identchannel("normalize-c")
  label $TEXT pos(5, 230), size(46, 12), text("Mod"), identchannel("modlabel1")
  label $TEXT pos(5, 242), size(46, 12), text("Mode:"), identchannel("modlabel2")
  combobox $COMBO pos(50, 232), size(70, 20), channel("modmode"), items("Bypass","Mirror","Wrap"), identchannel("modmode-c")
  rslider $GREEN_KNOB pos(119, 205), size(50, 50), channel("mod"), range(0, 99.99, 0, 1, .01), identchannel("mod-c"), text("Mod"), visible(0), popupprefix("Mod amount:\n"), popuppostfix(" %")


  rslider $GREEN_KNOB pos(119, 205), size(50, 50), channel("prescale"), range(1, 10, 1, 1, .01), identchannel("scale-c"), text("Scale"), popupprefix("Pre-scale: x")
  rslider $GREEN_KNOB pos(156, 205), size(50, 50), channel("min"), range(-100, 100, -100, 1, .01), text("Min"), popupprefix("Min Lev:\n"), popuppostfix(" %")
  rslider $GREEN_KNOB pos(192, 205), size(50, 50), channel("max"), range(-100, 100, 100, 1, .01), text("Max"), popupprefix("Max Lev:\n"), popuppostfix(" %")
  rslider $GREEN_KNOB pos(230, 205), size(50, 50), channel("postscale"), range(1, 10, 1, 1, .01), text("Scale"), popupprefix("Post-Scale:\nx")

  button $BTN pos(290, 210), size(80, 20), channel("reset"), latched(0), text("Reset"), value(0)
  button $BTN pos(290, 235), size(80, 20), channel("done"), identchannel("done-c"), latched(0), text("Done"), value(0)
}

</cabbagecode>
<csoundcode>
#include "includes/settings.inc.csd"

; Needed for InitTable, TableNorm, TableLimit, TableMod, TableCopy, TableUniToBi
#include "includes/udo/shape.inc.csd"
; Needed for InArray
#include "includes/system/udo/arrays.udo.csd"

; Name of instrument to trigger for drawing shapes
; Has to be a unique string, not numeric, no quotes
#ifndef FLEXSHAPER_INSTR
  #define FLEXSHAPER_INSTR #FlexShaperInstr#
#endif

; Text arrays used to set widget labels in FlexShaperSetSliders
#define SHAPER_LBL_ERR #fillarray("err", "err", "err", "err", "err", "err", "err", "err")#
#define SHAPER_LBL_808 #fillarray("Harm1", "Harm2", "Harm3", "Harm4", "Harm5", "Harm6", "Harm7", "Harm8")#
#define SHAPER_LBL_808EXT #fillarray("Hrm1", "Hrm2", "Hrm4", "Hrm8", "Hrm16", "Hrm32", "Hrm64", "H-128")#
#define SHAPER_LBL_SINE #fillarray("Harm1", "Harm2", "Harm3", "Harm4", "Harm5", "Harm6", "Harm7", "Harm8")#
#define SHAPER_LBL_1SEG #fillarray("--", "--", "--", "Val 1", "Val 2", "--", "--", "--")#
#define SHAPER_LBL_2SEG #fillarray("--", "--", "Val 1", "Seg 1", "Val 2", "Val 3", "--", "--")#
#define SHAPER_LBL_3SEG #fillarray("--", "Val 1", "Seg 1", "Val 2", "Seg 2", "Val 3", "Val 4", "--")#
#define SHAPER_LBL_SINEEXT #fillarray("Hrm1", "Hrm2", "Hrm4", "Hrm8", "Hrm16", "Hrm32", "Hrm64", "H-128")#
#define SHAPER_LBL_G13POLY #fillarray("F0", "F1", "F2", "F3", "F4", "F5", "F6", "F7")#
#define SHAPER_LBL_EVEN #fillarray("Harm2", "Harm4", "Harm6", "Harm8", "Hrm10", "Hrm12", "Hrm14", "Hrm16")#
#define SHAPER_LBL_ODD #fillarray("Harm1", "Harm3", "Harm5", "Harm7", "Harm9", "Hrm11", "Hrm13", "Hrm15")#
#define SHAPER_LBL_PULSE #fillarray("--", "--", "--", "Width", "Drop", "--", "--", "--")#
#define SHAPER_LBL_NOISE #fillarray("--", "--", "--", "Poles", "--", "--", "--", "--")#
#define SHAPER_LBL_MORPH #fillarray("--", "--", "--", "Morph", "--", "--", "--", "--")#

; values arrays used to set widget values in FlexShaperSetSliders
; anything set to -99 won't display
#define SHAPER_VAL_ERR #-99, -99, -99, -99, -99, -99, -99, -99#
#define SHAPER_VAL_808 #.8, 1#
#define SHAPER_VAL_808EXT #.8, 1#
#define SHAPER_VAL_SINE #1#
#define SHAPER_VAL_SINEEXT #1#
#define SHAPER_VAL_TRIANGLE #-99, 0, 0, 1, 0, -1, 0, -99#
#define SHAPER_VAL_SQUARE #-99, 1, 1, 1, -1, -1, -1, -99#
#define SHAPER_VAL_SAW #-99, 0, 1, 1, -1, -1, 0, -99#
#define SHAPER_VAL_RSAW #-99, 0, 1, -1, -1 ,1, 0, -99#
#define SHAPER_VAL_LINE #-99, -99, -99, -1, 1, -99, -99, -99#
#define SHAPER_VAL_PYRAMID #-99, -99, -1, 0, 1, -1, -99, -99#
#define SHAPER_VAL_G13POLY #.2, .2, 0, 1, 0, .6, 0, .2#
#define SHAPER_VAL_G14POLY #.2, .2, 0, 1, 0, .6, 0, .2#
#define SHAPER_VAL_EVEN #1, .8, .75, .5, .25, .125, .0125#
#define SHAPER_VAL_ODD #1, .8, .75, .5, .25, .125, .0125#
#define SHAPER_VAL_PULSE #-99, -99, -99, 0, 0, -99, -99, -99#
#define SHAPER_VAL_NOISE #-99, -99, -99, 1, -99, -99, -99, -99#
#define SHAPER_VAL_MORPH #-99, -99, -99, 1, -99, -99, -99, -99#


; opcode to set slider text and vals all at once, vals defailts to 0, -99 hides silder
opcode FlexShaperSetSliders,0,SS[]OOOOOOOO
  SChanPrefix, SArray[], iVal1,iVal2,iVal3,iVal4,iVal5,iVal6,iVal7,iVal8 xin
 
  chnset min(1,max(-1,iVal1)), strcat(SChanPrefix,"val1")
  chnset min(1,max(-1,iVal2)), strcat(SChanPrefix,"val2")
  chnset min(1,max(-1,iVal3)), strcat(SChanPrefix,"val3")
  chnset min(1,max(-1,iVal4)), strcat(SChanPrefix,"val4")
  chnset min(1,max(-1,iVal5)), strcat(SChanPrefix,"val5")
  chnset min(1,max(-1,iVal6)), strcat(SChanPrefix,"val6")
  chnset min(1,max(-1,iVal7)), strcat(SChanPrefix,"val7")
  chnset min(1,max(-1,iVal8)), strcat(SChanPrefix,"val8")
  chnset sprintfk("text(%s), visible(%d)", SArray[0], iVal1==-99 ? 0 : 1),strcat(SChanPrefix,"val1-c")
  chnset sprintfk("text(%s), visible(%d)", SArray[1], iVal2==-99 ? 0 : 1),strcat(SChanPrefix,"val2-c")
  chnset sprintfk("text(%s), visible(%d)", SArray[2], iVal3==-99 ? 0 : 1),strcat(SChanPrefix,"val3-c")
  chnset sprintfk("text(%s), visible(%d)", SArray[3], iVal4==-99 ? 0 : 1),strcat(SChanPrefix,"val4-c")
  chnset sprintfk("text(%s), visible(%d)", SArray[4], iVal5==-99 ? 0 : 1),strcat(SChanPrefix,"val5-c")
  chnset sprintfk("text(%s), visible(%d)", SArray[5], iVal6==-99 ? 0 : 1),strcat(SChanPrefix,"val6-c")
  chnset sprintfk("text(%s), visible(%d)", SArray[6], iVal7==-99 ? 0 : 1),strcat(SChanPrefix,"val7-c")
  chnset sprintfk("text(%s), visible(%d)", SArray[7], iVal8==-99 ? 0 : 1),strcat(SChanPrefix,"val8-c")

endop


; overloaded version passes default shape menu when none is given
opcode FlexShaperMon,0,SSo
  SChanPrefix,STitle,iSticky xin
  ; prints "CALLED DEFAULT\n"
  FlexShaperMon  SChanPrefix, STitle, gishape_menu_default, iSticky
endop

opcode FlexShaperMon,0,SSi[]o
  SChanPrefix, STitle, iShapeMenu[], iSticky xin

  ; if sticky is set, hide the done button since window is "stuck" on
  if(iSticky==1) then
  	chnset "visible(0)", strcat(SChanPrefix,"done-c")
  endif

  #ifdef FLEXSHAPER_USEMIDI
    kMidiShape1 ctrl7 $MIDI_INPUT_CHAN, $MIDICC_FLEXSHAPER_1, -1, 1
    kMidiShape2 ctrl7 $MIDI_INPUT_CHAN, $MIDICC_FLEXSHAPER_2, -1, 1
    kMidiShape3 ctrl7 $MIDI_INPUT_CHAN, $MIDICC_FLEXSHAPER_3, -1, 1
    kMidiShape4 ctrl7 $MIDI_INPUT_CHAN, $MIDICC_FLEXSHAPER_4, -1, 1
    kMidiShape5 ctrl7 $MIDI_INPUT_CHAN, $MIDICC_FLEXSHAPER_5, -1, 1
    kMidiShape6 ctrl7 $MIDI_INPUT_CHAN, $MIDICC_FLEXSHAPER_6, -1, 1
    kMidiShape7 ctrl7 $MIDI_INPUT_CHAN, $MIDICC_FLEXSHAPER_7, -1, 1
    kMidiShape8 ctrl7 $MIDI_INPUT_CHAN, $MIDICC_FLEXSHAPER_8, -1, 1
    kMidiNorm ctrl7 $MIDI_INPUT_CHAN, $MIDICC_FLEXSHAPER_NORM, 0, 1
    kMidiReset ctrl7 $MIDI_INPUT_CHAN, $MIDICC_FLEXSHAPER_RESET, 0, 1

    if(changed(kMidiShape1)==1) then
        chnset kMidiShape1, strcat(SChanPrefix,"val1")  
    endif
    if(changed(kMidiShape2)==1) then
        chnset kMidiShape2, strcat(SChanPrefix,"val2")  
    endif
    if(changed(kMidiShape3)==1) then
        chnset kMidiShape3, strcat(SChanPrefix,"val3")  
    endif
    if(changed(kMidiShape4)==1) then
        chnset kMidiShape4, strcat(SChanPrefix,"val4")  
    endif
    if(changed(kMidiShape5)==1) then
        chnset kMidiShape5, strcat(SChanPrefix,"val5")  
    endif
    if(changed(kMidiShape6)==1) then
        chnset kMidiShape6, strcat(SChanPrefix,"val6")  
    endif
    if(changed(kMidiShape7)==1) then
        chnset kMidiShape7, strcat(SChanPrefix,"val7")  
    endif
    if(changed(kMidiShape8)==1) then
        chnset kMidiShape8, strcat(SChanPrefix,"val8")  
    endif
    if(changed(kMidiNorm)==1) then
        chnset kMidiNorm, strcat(SChanPrefix,"normalize")  
    endif
    if(changed(kMidiReset)==1) then
        chnset kMidiReset, strcat(SChanPrefix,"reset")  
    endif


  #endif


  iTable chnget strcat(SChanPrefix,"table")
  InitTable iTable
  kShape chnget strcat(SChanPrefix,"shape")
  kPop chnget strcat(SChanPrefix,"pop")
  kDone chnget strcat(SChanPrefix,"done")

  kTmp = iShapeMenu[kShape]
  kShape = kTmp
  ; prints "CALLED 2 INPUT\n"
  ; printk2 kShape

  ; read Customize widgets
  kVal1 chnget strcat(SChanPrefix,"val1")
  kVal2 chnget strcat(SChanPrefix,"val2")
  kVal3 chnget strcat(SChanPrefix,"val3")
  kVal4 chnget strcat(SChanPrefix,"val4")
  kVal5 chnget strcat(SChanPrefix,"val5")
  kVal6 chnget strcat(SChanPrefix,"val6")
  kVal7 chnget strcat(SChanPrefix,"val7")
  kVal8 chnget strcat(SChanPrefix,"val8")
  kScale chnget strcat(SChanPrefix,"prescale")
  kPostScale chnget strcat(SChanPrefix,"postscale")
  kReset chnget strcat(SChanPrefix,"reset")
  kNorm chnget strcat(SChanPrefix,"normalize")
  kMin chnget strcat(SChanPrefix,"min")
  kMax chnget strcat(SChanPrefix,"max")
  kMod chnget strcat(SChanPrefix,"mod")
  kModMode chnget strcat(SChanPrefix,"modmode")

  kMorphShape1 chnget strcat(SChanPrefix,"morphshape1")
  kMorphShape2 chnget strcat(SChanPrefix,"morphshape2")

  ; adjust min and max against each other
  if changed(kMin)==1 && (kMin>kMax) then
    chnset kMin, strcat(SChanPrefix,"max")
  elseif changed(kMax)==1 && (kMax<kMin) then
    chnset kMax, strcat(SChanPrefix,"min")
  endif

  ; negative shape indicates reset
  kShape = kReset==0 ? kShape : -1*kShape

  ; limit updating rate
  if metro($INSTR_TICKS)==1 then
    if changed(kShape, kVal1, kVal2, kVal3, kVal4, kVal5, kVal6, kVal7, kVal8, kNorm, kScale, kPostScale, kMod, kModMode, kMin, kMax, kReset, kMorphShape1, kMorphShape2)==1 then
      scoreline sprintfk("i\"%s\" 0 .001 %d %d \"%s\"", "$FLEXSHAPER_INSTR", kShape, iTable, SChanPrefix), k(1)

; TODO investigate getting rid of instr here and just using UDO like:
;      DrawTable i(kShape), iTable, SChanPrefix
    endif
  endif

  if (changed(kModMode)==1) then
    chnset sprintfk("visible(%d)",kModMode==1 ? 0 : 1), strcat(SChanPrefix,"mod-c")
  endif

  ; show customize popup if button is pushed
  if changed(kPop)==1 && kPop==1 then
    chnset sprintfk("visible(%d) text(\"%s\")",1,STitle), strcat(SChanPrefix,"plant-c") ;"cc-popup"
    chnset sprintfk("visible(%d)",1), strcat(SChanPrefix,"tint")
  endif

  ; ; set graph to active if manual breakpoints is on
  ; if changed(kbreak)==1 then
  ;   chnset sprintfk("active(%d)", kbreak==1 ? 1 : 0), "graph1"
  ; endif

  ; only show pre scaling when not normalizing
  if changed(kNorm)==1 then
    chnset sprintfk("visible(%d)",kNorm==1 ? 0 : 1), strcat(SChanPrefix,"scale-c")
    chnset sprintfk("visible(%d)",kNorm==0 ? 0 : 1), strcat(SChanPrefix,"modlabel1")
    chnset sprintfk("visible(%d)",kNorm==0 ? 0 : 1), strcat(SChanPrefix,"modlabel2")
    chnset sprintfk("visible(%d)",kNorm==0 ? 0 : 1), strcat(SChanPrefix,"modmode-c")
    chnset sprintfk("visible(%d)",kNorm==0 || kModMode==1 ? 0 : 1), strcat(SChanPrefix,"mod-c")
  endif

  ; hide GUI popup if either kDone changes to 1 or kPop changes to 0
  if (changed(kDone)==1 && kDone==1) || (changed(kPop)==1 && kPop==0) then
    chnset k(0), strcat(SChanPrefix,"pop")
    chnset k(0), strcat(SChanPrefix,"done")
    chnset strcpyk("visible(0)"), strcat(SChanPrefix,"plant-c") ; "cc-popup"
    chnset strcpyk("visible(0)"), strcat(SChanPrefix,"tint")
  endif
endop

; this opcode reads widgets and draws a table
opcode DrawTable,0,iiS
 iShape,iTable,SChanPrefix xin

  iVal1 chnget strcat(SChanPrefix,"val1")
  iVal2 chnget strcat(SChanPrefix,"val2")
  iVal3 chnget strcat(SChanPrefix,"val3")
  iVal4 chnget strcat(SChanPrefix,"val4")
  iVal5 chnget strcat(SChanPrefix,"val5")
  iVal6 chnget strcat(SChanPrefix,"val6")
  iVal7 chnget strcat(SChanPrefix,"val7")
  iVal8 chnget strcat(SChanPrefix,"val8")

  iMorphShape1 chnget strcat(SChanPrefix,"morphshape1")
  iMorphShape2 chnget strcat(SChanPrefix,"morphshape2")

  iNorm = (chnget(strcat(SChanPrefix,"normalize"))*2)-1
  iScale chnget strcat(SChanPrefix,"prescale")
  iPostScale chnget strcat(SChanPrefix,"postscale")
  iMod chnget strcat(SChanPrefix,"mod")
  iModMode chnget strcat(SChanPrefix,"modmode")
  iMin chnget strcat(SChanPrefix,"min")
  iMax chnget strcat(SChanPrefix,"max")
  iMod*=.01
  iMin*=.01
  iMax*=.01
  iLastShape chnget strcat(SChanPrefix,"lastshape")

  ; negative shape indicates reset
  iReset = iShape < 0 ? 1 : 0

if changed(iShape)==1 then
  iShape = abs(iShape)

  ; this is *SCREAMING* for better optimization
  iGen10 InArray iShape, gigen10shapes
  i1Seg InArray iShape, gi1segshapes
  i2Seg InArray iShape, gi2segshapes
  i3Seg InArray iShape, gi3segshapes

  ; special handling for morph shapes, since they're not handles with the sliders
  if(iShape==$W_MORPH) then
    chnset "visible(1)", strcat(SChanPrefix,"morph1-c")
    chnset "visible(1)", strcat(SChanPrefix,"morph2-c")
  else
    chnset "visible(0)", strcat(SChanPrefix,"morph1-c")
    chnset "visible(0)", strcat(SChanPrefix,"morph2-c")
  endif

 if(InArray(iShape,gigen10shapes)>=1) then
  print iShape
 endif
; TODO why doesn't this work?!?  CSOUND BUG?!?!? document

  if(iGen10>=1) then
    ; printks2 "gen10: %d", iShape
    iFileTable ftgen iTable, 0, $TABLE_SIZE, iNorm*10, iVal1*iScale, iVal2*iScale, iVal3*iScale, iVal4*iScale, iVal5*iScale, iVal6*iScale, iVal7*iScale, iVal8*iScale   
  elseif (iShape==$W_808EXT || iShape==$W_SINEEXT) then
    ; printks2 "extended: %d", iShape
    iFileTable ftgen iTable, 0, $TABLE_SIZE, iNorm*9, 1, iVal1*iScale, 0, 2, iVal2*iScale, 0, 4, iVal3*iScale, 0, 8, iVal4*iScale, 0, 16, iVal5*iScale, 0, 32, iVal6*iScale, 0, 64, iVal7*iScale, 0, 128, iVal8*iScale, 0
 elseif (iShape==$W_EVEN) then
    ; printks2 "even: %d", iShape
    iFileTable ftgen iTable, 0, $TABLE_SIZE, iNorm*9, 2, iVal1*iScale, 0, 4, iVal2*iScale, 0, 6, iVal3*iScale, 0, 8, iVal4*iScale, 0, 10, iVal5*iScale, 0, 12, iVal6*iScale, 0, 14, iVal7*iScale, 0, 16, iVal8*iScale, 0
  elseif (iShape==$W_ODD) then
    ; printks2 "odd: %d", iShape
    iFileTable ftgen iTable, 0, $TABLE_SIZE, iNorm*9, 1, iVal1*iScale, 0, 3, iVal2*iScale, 0, 5, iVal3*iScale, 0, 7, iVal4*iScale, 0, 9, iVal5*iScale, 0, 11, iVal6*iScale, 0, 13, iVal7*iScale, 0, 15, iVal8*iScale, 0
;  elseif(InArray(iShape,gi1segshapes)>=1) then
 elseif (i1Seg>=1) then
  ; 1 segment
    ; printks2 "1seg: %d", iShape
    iFileTable ftgen iTable, 0, $TABLE_SIZE, iNorm*7, iVal4*iScale, $TABLE_SIZE, iVal5*iScale
;elseif(InArray(iShape,gi2segshapes)>=1) then
elseif (i2Seg>=1) then
  ; 2 segments
    printks2 "2seg: %d", iShape
    iSeg1 = (iVal4*$TABLE_HALF_SIZE)+$TABLE_HALF_SIZE
    iSeg2 = $TABLE_SIZE-iSeg1
    iFileTable ftgen iTable, 0, $TABLE_SIZE, iNorm*7, iVal3*iScale, iSeg1, iVal5*iScale, iSeg2, iVal6*iScale
;elseif (InArray(iShape,gi3segshapes)>=1) then
elseif (i3Seg>=1) then
  ; 3 segments
    printks2 "3seg: %d", iShape
    iSeg1=(iVal3*$TABLE_QUARTER_SIZE)+$TABLE_QUARTER_SIZE
    iSeg3=(-iVal5*$TABLE_QUARTER_SIZE)+$TABLE_QUARTER_SIZE
    iSeg2=$TABLE_SIZE-(iSeg1+iSeg3)
    iFileTable ftgen iTable, 0, $TABLE_SIZE, iNorm*7, iVal2*iScale, iSeg1, iVal4*iScale, iSeg2, iVal6*iScale, iSeg3, iVal7*iScale
  elseif (iShape==$W_G13POLY) then
;.2, .2, 0, 1, 0, .6, 0, .2
;1 1 0 5 0 3 0 1 
;    iScale=5*iScale
    iNewP5 = abs(iVal1)
    iNewP5 = max:i(iNewP5,.01)
    iNewP6 = abs(iVal2)
    iNewP6 = max:i(iNewP6,.01)
    iFileTable ftgen iTable, 0, $TABLE_SIZE, iNorm*13,  iNewP5*iScale, iNewP6*iScale, iVal3*iScale, iVal4*iScale, iVal5*iScale, iVal6*iScale, iVal7*iScale, iVal8*iScale 
  elseif (iShape==$W_G14POLY) then
;.2, .2, 0, 1, 0, .6, 0, .2
;1 1 0 5 0 3 0 1 
;    iScale=5*iScale
    iNewP5 = abs(iVal1)
    iNewP5 = max:i(iNewP5,.01)
    iNewP6 = abs(iVal2)
    iNewP6 = max:i(iNewP6,.01)
    iFileTable ftgen iTable, 0, $TABLE_SIZE, iNorm*14,  iNewP5*iScale, iNewP6*iScale, iVal3*iScale, iVal4*iScale, iVal5*iScale, iVal6*iScale, iVal7*iScale, iVal8*iScale 
  elseif (iShape==$W_PULSE) then
    iWidth = 50+(iVal4*50)
    iDrop = iVal5*$TABLE_SIZE
    ; iSign = iDrop==0 ? 1 : iDrop/abs(iDrop)
    if(iDrop==0) then
    	iSign=1
    else
    	iSign=iDrop/abs(iDrop)
    endif

    iSeg1 = $TABLE_SIZE*(iWidth*.01)
    iSeg2 = $TABLE_SIZE-iSeg1-abs(iDrop)
    iSeg2 = iSeg2 > 0 ? iSeg2 : 0

   iFileTable ftgen iTable, 0, $TABLE_SIZE, iNorm*7, iSign*iScale, iSeg1, iSign*iScale, abs(iDrop), -iSign*iScale, iSeg2, -iSign*iScale
  elseif (iShape==$W_NOISE) then
    ; NOTES - don't like this noise generation source, look for other options?
    iFileTable ftgen iTable, 0, $TABLE_SIZE, 21, 1, 1
    TableUniToBi iTable

    ; iCnt init 0
    ; while iCnt < $TABLE_SIZE do
    ;     iVal = birnd(1)
    ;     tabw_i iVal, iCnt, iTable
    ;     iCnt += 1
    ; od

  elseif (iShape==$W_MORPH) then
    iMorph = $BI_TO_UNI(iVal4)
    iMorph += (iMorphShape2*2)-1
    
    iMorphTable = $SHAPE_FTNUM_OFFSET+$W_MORPHLIST+iMorphShape1

    ; TODO!!!! this doesn't work with min/max/mod/etc
    ; ftmorf iMorph, iMorphTable, iTable
    ; TODO: also, pregain doens't work here either
    ftmorf iMorph, iMorphTable, giTempTable
    TableCopy giTempTable, iTable

    if(iNorm==1) then
      TableNorm iTable
    endif
  endif

    if(iNorm==1 && (iMod!=0 && iModMode!=1)) then
      TableMod iTable, iModMode, iMod
    endif
    TableLimit iTable, iMin, iMax, iPostScale


; set slider text and values for known tables shapes
  if (iShape!=iLastShape) || (iReset==1) then
    ; chnset sprintfk("visible(%d)", iShape==$W_SINE ? 0 : 1), "breakpoints-c"
    ;chnset k(1), "distgain" ; UNUSED?!?!?!?
    chnset k(1), strcat(SChanPrefix,"prescale")
    chnset k(1), strcat(SChanPrefix,"postscale")
    chnset k(-100), strcat(SChanPrefix,"min")
    chnset k(100), strcat(SChanPrefix,"max")
    chnset k(0), strcat(SChanPrefix,"mod")
    chnset k(1), strcat(SChanPrefix,"modmode")
    chnset k(1), strcat(SChanPrefix,"normalize")

    if (iShape==$W_808) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_808, $SHAPER_VAL_808
    elseif (iShape==$W_808EXT) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_808EXT, $SHAPER_VAL_808EXT
    elseif (iShape==$W_SINE) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_SINE, $SHAPER_VAL_SINE
    elseif (iShape==$W_SINEEXT) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_SINEEXT, $SHAPER_VAL_SINEEXT
    elseif (iShape==$W_TRIANGLE) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_3SEG, $SHAPER_VAL_TRIANGLE
    elseif (iShape==$W_SQUARE) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_3SEG, $SHAPER_VAL_SQUARE
    elseif (iShape==$W_SAW) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_3SEG, $SHAPER_VAL_SAW
    elseif (iShape==$W_RSAW) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_3SEG, $SHAPER_VAL_RSAW
    elseif (iShape==$W_LINE) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_1SEG, $SHAPER_VAL_LINE
    elseif (iShape==$W_PYRAMID) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_2SEG, $SHAPER_VAL_PYRAMID
    elseif (iShape==$W_G13POLY) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_G13POLY, $SHAPER_VAL_G13POLY
    elseif (iShape==$W_G14POLY) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_G13POLY, $SHAPER_VAL_G14POLY
    elseif (iShape==$W_EVEN) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_EVEN, $SHAPER_VAL_EVEN
    elseif (iShape==$W_ODD) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_ODD, $SHAPER_VAL_ODD
    elseif (iShape==$W_PULSE) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_PULSE, $SHAPER_VAL_PULSE
    elseif (iShape==$W_NOISE) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_NOISE, $SHAPER_VAL_NOISE
    elseif (iShape==$W_MORPH) then
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_MORPH, $SHAPER_VAL_MORPH
    else
      FlexShaperSetSliders SChanPrefix, $SHAPER_LBL_ERR, $SHAPER_VAL_ERR
    endif
	chnset iShape, strcat(SChanPrefix,"lastshape")
  endif
  chnset sprintfk("tablenumber(%d)",iTable), strcat(SChanPrefix,"graph")
  ; DECIDE WHAT TO DO WITH THIS!
  chnset 1, strcat(SChanPrefix,"HasChanged")
endif


endop


; redraws waveforms based on pfields & channels, sets visible sliders for them, and updates graph
instr $FLEXSHAPER_INSTR
  ; have to copy this or opcode call doesn't work, can't typecast a string!
  SVar = p6
;  chnset sprintfk("text(blah %d %s %d)", p5, SVar,p6), "debug"
  DrawTable p4, p5, SVar
endin


</csoundcode>
<help>
  This is temporary text... where does this get used?
</help>
</plant>
